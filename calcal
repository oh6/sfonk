#!/usr/bin/env python
# mad scientist diet planner

import sys
import os
import getopt
import re
import time

def comment(l):
	l = l.strip()
	c = None
	i = l.find('#')
	if i >= 0:
		c = l[i + 1:].strip()
		l = l[:i].strip()

	return (l, c)


def uname(s):
	return re.sub("^-?[0-9.]*", "", s)


class nval:
	def __init__(self, c, v = 0, f = 0):
		self.c = c
		self.v = v
		self.f = f


	def __div__(self, x):
		return nval(self.c / x, self.v / x, self.f / x)

	def __rmul__(self, x):
		return nval(self.c * x, self.v * x, self.f * x)

	def __mul__(self, x):
		return nval(self.c * x, self.v * x, self.f * x)

	def __add__(self, x):
		return nval(self.c + x.c, self.v + x.v, self.f + x.f)

	def __str__(self):
		s = "%d" % self.c
		if self.v:
			s += " %dV" % self.v
		if self.f:
			s += " %dF" % self.f
		return s

	def others(self):
		s = ""
		if self.v or self.f:
			if self.v:
				s += "%d veg" % self.v
			if self.f:
				s += "%s%d fruit" % (" " if s else "", self.f)

		return s
			

	def round(self):
		self.c = round(self.c)
		self.v = round(self.v)
		self.f = round(self.f)


class dbent:
	def __init__(self, v, c):
		self.v = v
		self.c = c


class Cal:
	def logfn(self):
		return "%s/.calcal.log" % os.environ["HOME"]


	def cleanlog(self):
		dmre = re.compile("^# [0-9]{4}(/[0-9]{2}){2}\n")
		lfn = self.logfn()
		f = open(lfn)
		nlfn = "%s.new" % self.logfn()
		nf = open(nlfn, "w")
		tfn = "%s.tmp" % self.logfn()
		ltfn = "%s.ltmp" % self.logfn()
		ft = None
		dm = None
		ldm = None
		ed = "vi"
		for i in ["VISUAL", "EDITOR"]:
			if i in os.environ:
				ed = os.environ[i]
				break
		while True:
			l = f.readline()
			if not l or dmre.match(l):
				if dm:
					ft.close()
				elif not ldm and not l:
					break
				if dm and ldm and dm == ldm:
					if os.system("diff %s %s" % (ltfn, tfn)):
						sys.stdout.write("overwrite? ")
						sys.stdout.flush()
						a = sys.stdin.readline()
						if a.lower() == "y\n":
							ldm = None
						else:
							os.system("%s %s" % (ed, tfn))
					else:
						print "skipping %s" % ldm
						ldm = None
				if ldm:
					ft = open(ltfn, "r")
					for l2 in ft:
						nf.write(l2)
					ft.close
				if dm:
					os.rename(tfn, ltfn)
				ldm = dm
				dm = l
				if l:
					ft = open(tfn, "w")

			if l:
				ft.write(l)
		f.close()
		nf.close()
		os.system("mv -i %s %s" % (nlfn, lfn))
		sys.exit(0)


	def __init__(self, opts):
		self.units = {}
		self.eq = {}
		self.db = {}
		self.recipes = {}
		self.recipe = None
		self.summarize = None
		self.store = {}
		self.nv = nval(0)
		self.nr = -1
		self.ddelta = 0
		self.dtarget = None
		self.cw = {}
		self.recpend = None
		self.newdb = []
		self.add_ig("overflow:	1/1\n")
		self.fcal("%s/.calories" % os.environ["HOME"])

		for i in opts:
			if i[0] == "-s":
				self.summarize = open(self.logfn(), "a")
				sys.stdout.write("# %s\n" % time.strftime("%F").replace("-","/"))
			elif i[0] == "-c":
				self.cleanlog()
			elif i[0] == "-h":
				self.help()
			else:
				usage("unknown option %s" % i[0])


	def help(self):
		sys.stdout.write(usagemsg())
		sys.stdout.write("""\
-c - clean log file
-h - this message
-s - summarize
""")
		sys.exit(0)


	def error(self, s):
		sys.stderr.write("%s:%d: %s\n" % (self.fn, self.nr, s))
		sys.exit(1)


	def cwerror(self, n, o, ig):
		self.error("weight %d greater than previous %d for %s" %
			(n, o, ig))


	def unify(self, s):
		if s == "":
			self.error("amount missing")

		m = re.search("^(-?[0-9.]*)([^0-9].*)?", s)
		n = s[m.start(1):m.end(1)]
		u = s[m.start(2):m.end(2)]
		if n == "":
			n = 1.0
		else:
			n = float(n)
		if u in self.units:
			n *= self.units[u].v
		elif u != "g" and u != "ml" and u != "":
			self.error("weird unit %s\n" % u)

		return n


	def nify(self, s, a):
		c = None
		v = None
		f = None
		s = s.split()
		for i in s:
			if i.endswith("V"):
				if v != None:
					self.error("duplicate vegetable")
				v = self.unify(i[:-1])
			elif i.endswith("F"):
				if f != None:
					self.error("duplicate fruit")
				f = self.unify(i[:-1])
			else:
				if c != None:
					self.error("duplicate calorie")
				c = self.unify(i)

		if c == None:
			if v != None and f == None:
				c = v
				v = a
			elif v == None and f != None:
				c = f
				f = a
			else:
				self.error("missing calorie")

		if v == None:
			v = 0

		if f == None:
			f = 0

		return nval(float(c) / a, float(v) / a, float(f) / a);


	def cc2v(self, s):
		cv = s.strip().split('/')
		if len(cv) != 2:
			self.error("unrecognized calorie value")
		return self.nify(cv[0], self.unify(cv[1])) 


	def add_ig(self, l):
		(l, c) = comment(l)
		v = l.split(":")
		if len(v) != 2:
			return False

		self.db[v[0]] = dbent(self.cc2v(v[1]), c)
		return True


	def add_u(self, l):
		(l, c) = comment(l)
		v = l.split("=")
		if len(v) != 2:
			return False

		u = v[0].strip()
		if u[:1].isdigit():
			return False

		if u == "DELTA":
			self.ddelta = float(v[1].strip())
			return True

		self.units[u] = dbent(float(v[1].strip()), c)
		return True


	def add_e(self, l):
		(l, c) = comment(l)
		v = l.split("~")
		if len(v) != 2:
			return False

		u2 = self.unify(v[1].strip())
		u1 = v[0].strip()
		ig = u1
		m = re.search("[ 	]+", ig)
		ig = ig[m.end():]
		u1 = u1[:m.start()]
		un1 = uname(u1)
		u1 = self.unify(u1)

		self.eq[(ig, un1)] = dbent(u2 / u1, c)

		return True


	def badig(self, ig):
		if ig in self.db:
			return False

		self.error("unknown item %s\n" % ig)
		return True


	def lcw(self, ig):
		if not ig in self.cw:
			self.error("no last weighing for %s" % ig)

		return self.cw[ig]


	def rbegin(self, l):
		if not l.endswith("{"):
			return False

		if self.recpend != None:
			self.error("already in recipe")
			return False

		v = l[:-1].strip().split("/")
		if len(v) != 2:
			self.error("missing serving count")
			return False

		self.recpend = (v[0], int(v[1]), self.nv)
		self.nv = nval(0)

		if not self.summarize:
			sys.stdout.write("%s\n" % l)

		return True


	def rend(self, l):
		if l != "}":
			return False

		if not self.recpend:
			self.error("not in recipe")
			return False

		(name, nserv, onv) = self.recpend
		self.recpend = None
		nv = self.nv
		self.nv = onv;
		nv.round()
		self.db[name] = dbent(nv / nserv, "")
		self.newdb.append((name, nv, nserv))

		if not self.summarize:
			sys.stdout.write("}\n%s: %s/%d\n" % (name, nv, nserv))

		return True


	def add_r(self, l):
		return self.rbegin(l) or self.rend(l)


	def xcal(self, l):
		ol = l
		l = l.strip()
		if self.summarize:
			self.summarize.write(ol)

		if self.add_r(l):
			return

		if self.add_ig(l) or self.add_u(l) or self.add_e(l):
			if self.summarize:
				sys.stdout.write(ol)
			return


		l = re.sub("#.*", "", l).strip()
		if not l:
			return

		m = re.search("\\s+", l)
		if m:
			v = l[:m.start()]
			ig = l[m.end():]
		else:
			ig = l
			v = "1"

		if v.endswith("-"):
			v = v[:-1]
			if not self.badig(ig):
				self.store[ig] -= self.unify(v)
			return

		if v.endswith("+"):
			v = v[:-1]
			if not self.badig(ig):
				if not ig in self.store:
					self.store[ig] = 0
				self.store[ig] += self.unify(v)
			return

		if ig.endswith("+"):
			ig = ig[:-1]
			if not self.badig(ig):
				self.cw[ig] = self.unify(v)
			return

		cwval = None
		if ig.endswith("-"):
			ig = ig[:-1]
			if self.badig(ig):
				return
			cwval = self.lcw(ig)

		un = uname(v)
		ov = v
		v = self.unify(v)
		if cwval:
			if cwval < v:
				self.cwerror(v, cwval, ig)
			self.cw[ig] = v
			v = cwval - v
		sig = ig.split("@")
		if len(sig) == 1:
			if self.badig(ig):
				return

			mv = self.db[ig].v
			ic = self.db[ig].c
			if ic == None:
				ic = ""

			if (ig, un) in self.eq:
				e = self.eq[(ig, un)]
				v *= e.v
				if e.c:
					ic += " " + e.c
				ic += "%s = %d" % (ov, v)

			if ig in self.store and not (cwval == None and ig in self.cw):
				self.store[ig] -= v
				if self.store[ig] < 0:
					v += self.store[ig]
					self.store[ig] = 0
		else:
			mv = self.cc2v(sig[1].strip())
			ig = sig[0].strip()
			ic = None

		if ic:
			ic = " (%s)" % ic.strip()
		else:
			ic = ""

		self.nv += v * mv
		if self.ddelta:
			if ig == "overflow":
				m = re.search("# target: ([0-9]+)", ol)
				if m:
					self.dtarget = int(m.group(1))
				else:
					self.dtarget = self.nv.c
			elif ig == "day":
				ic = self.nv.others()
				if ic:
					ic = " (%s)" % ic
				self.nv = nval(self.nv.c)
				tc = round(self.nv.c)
				if tc > 0 and self.dtarget:
					self.dtarget -= self.ddelta
					if self.dtarget < 0:
						self.dtarget = 0
					ic += " (net %d target %d offset %d)" % \
						(tc, self.dtarget, tc - self.dtarget)
		if not self.summarize:
			sys.stdout.write("%8.1f %8.1f %8.1f %s%s\n" % 
				 (v * mv.c, v, mv.c, ig, ic))


	def cal(self, f):
		self.nr = 0
		for l in f:
			self.nr += 1
			self.xcal(l)


	def fcal(self, fn):
		try:
			f = open(fn)
		except (IOError, OSError), err:
			sys.stderr.write("%s\n" % str(err))
			sys.exit(1)

		self.fn = fn
		self.cal(f)
		f.close()
		self.fn = None


	def finish(self):
		if self.summarize:
			for i in self.newdb:
				(name, nv, nserv) = i
				sys.stdout.write("%-16s%d" % ("%s:" % name, nv.c))
				if nv.v:
					sys.stdout.write(" %dV" % nv.v)
				if nv.f:	
					sys.stdout.write(" %dF" % nv.f)
				sys.stdout.write("/%d\n" % nserv)
			first = "\n"
			for i in self.store:
				sys.stdout.write("%s%d+\t%s\n" %
					(first, round(self.store[i]), i))
				first = ""
			first = "\n"
			for i in self.cw:
				sys.stdout.write("%s%d\t%s+\n" %
					(first, self.cw[i], i))
				first = ""
			sys.stdout.write("\n%d\toverflow" %
				round(self.nv.c))
			if self.dtarget:
				sys.stdout.write(" # target: %d" % self.dtarget)
			sys.stdout.write("\n")
		else:
			sys.stdout.write("%d" % round(self.nv.c))
			o = self.nv.others()
			if o:
				sys.stdout.write(" (%s)" % o)
			sys.stdout.write("\n")


def usagemsg():
	if len(sys.argv) > 0:
		prog = sys.argv[0]
	else:
		prog = "calcal"
	return "usage: %s [-hrs] [file]\n" % prog


def usage(s = None):
	if s:
		sys.stderr.write("%s\n" % s)
	sys.stderr.write(usagemsg())
	sys.exit(2)


try:
	(opts, args) = getopt.getopt(sys.argv[1:], "chs")
except getopt.GetoptError, err:
	usage(str(err))

cc = Cal(opts)

if len(args) < 1:
	cc.fn = "stdin"
	cc.cal(sys.stdin)
elif len(args) > 1:
	usage()
else:
	cc.fcal(args[0])

cc.finish()
